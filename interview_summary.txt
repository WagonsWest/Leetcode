citibank(C++)
C++三大特性：
重载和重写：
虚函数：
Pass by value & Pass by reference:
public protected private:
malloc / new:
constructor & destructor:
struct / union:
函数指针和指针函数：
浅拷贝和深层拷贝：

tesla(Java)
Java ORM: JDBC
SQL CHAR / VARCHAR:
hashtable:

微服务框架：
搭建网站 架构：

字节跳动
算法题：
input: 1->2->3->4->5->... ->n-1->n
output: 1->n->2->n-1->3->n-2->....
skip List:
数据结构来表示消费者和生产者：Blocking Queue
如何处理多线程并发情况：
数据和请求如何从网页端传输到服务器端：
泛型：

Java:
Java, JVM, Spring boot, Redis Guide: https://snailclimb.gitee.io/javaguide/#/

ArrayList & LinkedList底层实现:
ArrayList 为动态数组(dynamic array) 增删慢，随机查询快; LinkedList 为双向链表(doubly linked list) 增删快，随机查询慢

Red-Black tree in HashMap:
当HashMap中有大量的元素都存放到同一个桶中时，这个桶下有一条长长的链表，这个时候HashMap就相当于一个单链表，假如单链表有n个元素，遍历的时间复杂度就是O(n)，完全失去了它的优势。
针对这种情况，JDK1.8中引入了红黑树来优化这个问题，为什么不引入二叉查找树呢？因为二叉查找树的一般操作的执行时间为O(lgn)，但是二叉查找树若退化成了一棵具有n个结点的线性链后，
则这些操作最坏情况运行时间为O(n)。与单链表一样。所以此时我们需要红黑树它在二叉查找树的基础上增加了着色和相关的性质使得红黑树相对平衡，从而保证了红黑树的查找、
插入、删除的时间复杂度最坏为O(log n)。

双亲委派机制:
1.防止重复加载同一个.class。通过委托去向上面问一问，加载过了，就不用再加载一遍。保证数据安全。
2.保证核心.class不能被篡改。通过委托方式，不会去篡改核心.clas，即使篡改也不会去加载，即使加载也不会是同一个.class对象了。
  不同的加载器加载同一个.class也不是同一个Class对象。这样保证了Class执行安全。

JVM指令重排序问题：
为了使得处理器内部的运算单元能尽量被充分利用，处理器可能会对输入代码进行乱序执行（Out-Of-Order Execution）优化，
处理器会在计算之后将乱序执行的结果重组，保证该结果与顺序执行的结果是一致的，但并不保证程序中各个语句计算的先后顺序与输入代码中的顺序一致。
因此，如果存在一个计算任务依赖另一个计算任务的中间结果，那么其顺序性并不能靠代码的先后顺序来保证。

== & equals() 不同：
== tests whether two variables have the same references;
equals() tests whether two variables have the same states.

Synchronized:
If a method or block declares as synchronized then at a time only one thread at a time is allowed to execute that method 
or block on the given object so that the data inconsistence problem will be resolved.
The main disadvantage of this keyword is it increases the waiting time of the thread and creates performance problems.

Volatile:
If a variable is declared as volatile as for every thread JVM will create a separate local copy. 
Every modification performed by the thread will take place in the local copy so that there is no effect on the remaining threads. 
Overcoming the data inconsistency problem is the advantage and the volatile keyword is creating and maintaining a separate copy 
for every thread increases the complexity of the programming and creates performance problem is a disadvantage.

Coroutine vs. Threads:
The advantages of coroutines over threads are that they may be used in a hard-realtime context 
(switching between coroutines need not involve any system calls or any blocking calls whatsoever), 
there is no need for synchronisation primitives such as mutexes, semaphores, etc. in order to guard critical sections, 
and there is no need for support from the operating system.

Fair lock vs. unfair lock:
公平锁会在选择下一个线程的时候考虑等待时间，非公平锁则会在释放锁之后让尝试access锁的线程立即成功。

Java 多线程的实现方式:
1.继承Thread类，重写run方法
2.实现Runnable接口，重写run方法，实现Runnable接口的实现类的实例对象作为Thread构造函数的target
3.通过Callable和FutureTask创建线程
4.通过线程池创建线程

Java 创建对象的过程:
类加载检查 -> 分配内存 -> 初始化零值 -> 设置对象头 -> 执行init
内存分配的方式：有内存碎片 -> 指针碰撞；无内存碎片 -> 空闲列表

JMM Intro: https://zhuanlan.zhihu.com/p/29881777

JVM Garbage Collection:
标记-清除(mark-sweep)，标记-复制(mark-copy)，标记-整理(mark-sweep-compact)
分代收集算法: 根据各个年代的特点选择合适的垃圾收集算法。
新生代 -> 标记-复制；老年代 -> 标记-清除/整理

Garbage Collector:
Serial; ParNew; Parallel; CMS; G1
ref: https://snailclimb.gitee.io/javaguide/#/docs/java/jvm
Concurrent Mark Sweep:
优势: 并发收集、低停顿
劣势: 对 CPU 资源敏感；无法处理浮动垃圾；会导致收集结束时会有大量空间碎片产生。



网络：
HTTP vs. HTTPS:
http所有传输的内容都是明文，并且客户端和服务器端都无法验证对方的身份。
https具有安全性的ssl加密传输协议，加密采用对称加密，
https协议需要到ca申请证书，一般免费证书很少，需要交费。
可以将HTTPS协议简单理解为HTTP协议＋TLS/SSL

TCP vs. UDP:
TCP作为面向流的协议，提供可靠的、面向连接的运输服务，并且提供点对点通信
UDP作为面向报文的协议，不提供可靠交付，并且不需要连接，不仅仅对点对点，也支持多播和广播
TCP is a connection-oriented protocol, whereas UDP is a connectionless protocol.
The speed for TCP is slower while the speed of UDP is faster
TCP uses handshake protocol while UDP uses no handshake protocols
TCP does error checking and also makes error recovery, on the other hand, UDP performs error checking, but it discards erroneous packets.
TCP has acknowledgment segments, but UDP does not have any acknowledgment segment.
TCP is heavy-weight, and UDP is lightweight.

TCP 3-way-handshake connection & 4-way-handshake termination:

connection:
1. 第一次握手:客户端将标志位SYN置为1，随机产生一个值序列号seq=x，并将该数据包发送给服务端，客户端进入syn_sent状态，等待服务端确认。
2. 第二次握手:服务端收到数据包后由标志位SYN=1知道客户端请求建立连接，服务端将标志位SYN和ACK都置为1，ack=x+1,随机产生一个值seq=y，
并将该数据包发送给客户端以确认连接请求，服务端进入syn_rcvd状态。
3. 第三次握手:客户端收到确认后检查,如果正确则将标志位ACK为1，ack=y+1，并将该数据包发送给服务端，服务端进行检查如果正确则连接建立成功，
客户端和服务端进入established状态，完成三次握手，随后客户端和服务端之间可以开始传输数据了
三次握手的过程即是通信双方相互告知序列号起始值， 并确认对方已经收到了序列号起始值。

termination:
1. 第一次挥手：客户端发送一个FIN，用来关闭客户端到服务端的数据传送，客户端进入fin_wait_1状态。
2. 第二次挥手：服务端收到FIN后，发送一个ACK给客户端，确认序号为收到序号+1，服务端进入Close_wait状态。此时TCP连接处于半关闭状态，
即客户端已经没有要发送的数据了，但服务端若发送数据，则客户端仍要接收。
3. 第三次挥手：服务端发送一个FIN，用来关闭服务端到客户端的数据传送，服务端进入Last_ack状态。
4. 第四次挥手：客户端收到FIN后，客户端进入Time_wait状态，接着发送一个ACK给服务端，确认后，服务端进入Closed状态，完成四次挥手。
当服务端收到客户端的 FIN 数据包后，服务端可能还有数据没发完，不会立即close。所以服务端会先将 ACK 发过去告诉客户端我收到你的断开请求了，
但请再给我一点时间，这段时间用来发送剩下的数据报文，发完之后再将 FIN 包发给客户端表示现在可以断了。

XSS & CSRF:
Cross-Site Scripting (XSS) attacks are a type of injection, in which malicious scripts are injected into otherwise benign and trusted websites. 
XSS attacks occur when an attacker uses a web application to send malicious code, generally in the form of a browser side script, to a different end user. 
Flaws that allow these attacks to succeed are quite widespread and occur anywhere a web application uses input from a user within the output 
it generates without validating or encoding it.
An attacker can use XSS to send a malicious script to an unsuspecting user. The end user’s browser has no way to know that the script should not be trusted, 
and will execute the script. Because it thinks the script came from a trusted source, the malicious script can access any cookies, session tokens, 
or other sensitive information retained by the browser and used with that site.

Cross-Site Scripting (XSS) attacks occur when:
1.Data enters a Web application through an untrusted source, most frequently a web request.
2.The data is included in dynamic content that is sent to a web user without being validated for malicious content.

Cross-Site Request Forgery (CSRF) is an attack that forces an end user to execute unwanted actions on a web application in which they’re currently authenticated. 
With a little help of social engineering (such as sending a link via email or chat), an attacker may trick the users of a web application into 
executing actions of the attacker’s choosing.

HTTP1.0 vs. 1.1 vs. 2.0:
HTTP1.1默认开启长连接(PersistentConnection)，在一个TCP连接上可以传送多个HTTP请求和响应。使用 TCP 长连接的方式改善了 HTTP/1.0 短连接造成的性能开销。
支持管道（Pipeline）网络传输，只要第一个请求发出去了，不必等其回来，就可以发第二个请求出去，可以减少整体的响应时间。

提出多路复用(MultiPlexing)。多路复用前，文件时串行传输的，请求a文件，b文件只能等待，并且连接数过多。引入多路复用，a文件b文件可以同时传输。
引入了二进制(Binary Format)数据帧。其中帧对数据进行顺序标识，有了序列id，服务器就可以进行并行传输数据。

DNS lookup:
1.客户机发出查询请求，在本地计算机缓存查找，若没有找到，就会将请求发送给dns服务器
2.本地dns服务器会在自己的区域里面查找，找到即根据此记录进行解析，若没有找到，就会在本地的
缓存里面查找
3.本地服务器没有找到客户机查询的信息，就会将此请求发送到根域名dns服务器
4.根域名服务器解析客户机请求的根域部分，它把包含的下一级的dns服务器的地址返回到客户机的
dns服务器地址
5.客户机的dns服务器根据返回的信息接着访问下一级的dns服务器
6.这样递归的方法一级一级接近查询的目标，最后在有目标域名的服务器上面得到相应的IP信息
7.客户机的本地的dns服务器会将查询结果返回给我们的客户机
8.客户机根据得到的ip信息访问目标主机，完成解析过程

DNS劫持: 将域名导致错误的ip地址 HTTP劫持:在与目标地址交流的过程中劫持request

HTTP KeepAlive vs. TCP KeepAlive:
HTTP Keep-Alive is a feature that allows HTTP client (usually browser) and server (webserver) to send multiple request/response pairs over the same TCP connection. 
TCP keepalive keeps TCP connection opened by sending small packets. Additionally, when the packet is sent this serves as a check so the sender is notified 
as soon as connection drops.

输入URL到展现页面：
1. 进行DNS解析操作，根据DNS解析的结果查到服务器IP地址
2. 通过ip寻址和arp，找到服务器，并利用三次握手建立TCP连接
3. 浏览器生成HTTP报文，发送HTTP请求，等待服务器响应
4. 服务器处理请求，并返回给浏览器
5. 根据HTTP是否开启长连接，进行TCP的挥手过程
6. 浏览器根据收到的静态资源进行页面渲染

JWT:
Header+Playload+Signature
1.客户端使用账户密码请求登录接口
2.登录成功后服务器使用签名密钥生成JWT，然后返回JWT给客户端。
3.客户端再次向服务端请求其他接口时带上JWT
4.服务端接收到JWT后验证签名的有效性，对客户端做出相应的响应



Database:
乐观锁 optimistic lock vs. pessimistic lock 悲观锁:
乐观：每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据
悲观：共享资源每次只给一个线程使用，其它线程阻塞，用完后再把资源转让给其它线程
CAS（乐观锁）适用于写比较少的情况下（多读场景，冲突一般较少），synchronized（悲观锁）适用于写比较多的情况下（多写场景，冲突一般较多）

Database Isolation:
脏读 不可重复读 幻读 
读未提交（READ UNCOMMITTED）123
读提交 （READ COMMITTED）23
可重复读 （REPEATABLE READ）3（但是MySQL中通过行锁和间隙锁大幅降低了幻读发生的频率） - MySQL默认，使用MVCC（多版本并发控制）
串行化 （SERIALIZABLE）/

MVCC:
MVCC为多版本并发控制，即同一条记录在系统中存在多个版本。其存在目的是在保证数据一致性的前提下提供一种高并发的访问性能。对数据读写在不加读写锁的情况下实现互不干扰,
从而实现数据库的隔离性,在事务隔离级别为读提交和可重复读中使用到。
在InnoDB中，事务在开始前会向事务系统申请一个事务ID，该ID是按申请顺序严格递增的。每行数据具有多个版本，每次事务更新数据都会生成新的数据版本，而不会直接覆盖旧的数据版本。
数据的行结构中包含多个信息字段。其中实现MVCC的主要涉及最近更改该行数据的事务ID（DB_TRX_ID）和可以找到历史数据版本的指针（DB_ROLL_PTR）。
InnoDB在每个事务开启瞬间会为其构造一个记录当前已经开启但未提交的事务ID的视图数组。通过比较链表中的事务ID与该行数据的值与对应的DB_TRX_ID，
并通过DB_ROLL_PTR找到历史数据的值以及对应的DB_TRX_ID来决定当前版本的数据是否应该被当前事务所见。最终实现在不加锁的情况下保证数据的一致性。

InnoDB & 事务:
事务其实就是并发控制的基本单位；事务是一个序列操作，其中的操作要么都执行，要么都不执行，它是一个不可分割的工作单位。
Atomicity Consistency Isolation Durability

The InnoDB transaction model aims to combine the best properties of a multi-versioning database with traditional two-phase locking. 
InnoDB performs locking at the row level and runs queries as nonlocking consistent reads by default, in the style of Oracle. 
The lock information in InnoDB is stored space-efficiently so that lock escalation is not needed. 
Typically, several users are permitted to lock every row in InnoDB tables, or any random subset of the rows, without causing InnoDB memory exhaustion.

B-Tree vs. B+ Tree:
B-Tree和B+Tree的最大区别在于范围查询时的过程与性能
B+Tree只有leafNode会存放数据，并且所有leafNode之间用双向链表连接起来以便范围查询

InnoDB Index:
存储结构区分: 聚簇索引(Clustered index) & 二级索引(Secondary index)
字段特性区分：主键索引(primary key), 普通索引(normal index), unique index, fulltext index

MySQL index 失效:
1.违反最左前缀法则
2.在索引列上做任何操作
3.使用不等于
4.like以通配符%开头
5.字符串不加单引号
6.or连接，group by，order by

MySQL存储引擎:
InnoDB：支持事务处理，支持外键，支持崩溃修复能力和并发控制。如果需要对事务的完整性要求比较高（比如银行），要求实现并发控制（比如售票），
那选择InnoDB有很大的优势。如果需要频繁的更新、删除操作的数据库，也可以选择InnoDB，因为支持事务的提交（commit）和回滚（rollback）。

MyISAM：插入数据快，空间和内存使用比较低。如果表主要是用于插入新记录和读出记录，那么选择MyISAM能实现处理高效率。如果应用的完整性、并发性要求比较低，也可以使用。
如果数据表主要用来插入和查询记录，则MyISAM引擎能提供较高的处理效率。

MEMORY：所有的数据都在内存中，数据的处理速度快，但是安全性不高。如果需要很快的读写速度，对数据的安全性要求较低，可以选择MEMOEY。它对表的大小有要求，不能建立太大的表。
所以，这类数据库只使用在相对较小的数据库表。如果只是临时存放数据，数据量不大，并且不需要较高的数据安全性，可以选择将数据保存在内存中的Memory引擎，
MySQL中使用该引擎作为临时表，存放查询的中间结果

Archive：如果只有INSERT和SELECT操作，可以选择Archive，Archive支持高并发的插入操作，但是本身不是事务安全的。Archive非常适合存储归档数据，如记录日志信息等。

char vs. varchar:
char: Data is padded with blanks/spaces to fill the field size. Fixed length data type.
varchar: Variable length data type.
nchar & nvarchar: For other locales (eg. Chinese)

1NF, 2NF, 3NF:
第一范式是最基本的范式。如果数据库表中的所有字段值都是不可分解的原子值，就说明该数据库表满足了第一范式。
第二范式：关系模式必须满足第一范式，并且所有非主属性都完全依赖于主码。
第三范式：关系模型满足第二范式，所有非主属性对任何候选关键字都不存在传递依赖。即每个属性都跟主键有直接关系而不是间接关系。

SQL join:
inner join: 交集
full join: 并集
left join & right join: returns all the rows of the table on the left/right side of the join and matching rows for the table on the right/left side of join

Deadlock:
A deadlock is a situation where different transactions are unable to proceed because each holds a lock that the other needs. 
Because both transactions are waiting for a resource to become available, neither ever release the locks it holds.
1. 检测到死锁的循环依赖，并立即调整。(SHOW ENGINE INNODB STATUS)
2. 当查询的时间达到锁等待超时的设定后放弃锁请求。
3. Always be prepared to re-issue a transaction if it fails due to deadlock. Deadlocks are not dangerous. Just try again.
4. Keep transactions small and short in duration to make them less prone to collision.

MySQL主从复制+读写分离的应用场景:
1.从服务器作为主服务器的实时数据备份
2.主从服务器实时读写分离，从服务器实现负载均衡
3.多个从服务器根据业务重要性进行拆分访问
如何实现:
1.程序内部实现(insert, select, etc.)
2.通过MySQL-proxy、Amoda、Mycat、Altas等代理软件实现
3.独立开发DAL层软件实现



linux:
Process vs Thread:
1.Process means a program is in execution, whereas thread means a segment of a process.
2.A Process is not Lightweight, whereas Threads are Lightweight.
3.Process likely takes more time for context switching whereas as Threads takes less time for context switching.
4.A Process is mostly isolated, whereas Threads share memory.
5.Process does not share data, and Threads share data with each other.
top -p 进程pid 查询进程cpu与内存占用; top -H -p 进程pid 查询线程cpu与内存占用

进程调度的算法:
CFS(完全公平调度器) + vruntime, 参考linux思维导图 C:\Users\29191\OneDrive\桌面\面试

linux pipe:
管道是由内核管理的一个缓冲区，管道的一端连接一个进程的输出。这个进程会向管道中放入信息。管道的另一端连接一个进程的输入，这个进程取出被放入管道的信息。
一个缓冲区不需要很大一般为4K大小，它被设计成为环形的数据结构，以便管道可以被循环利用。
借助了文件系统的file结构和VFS(virtual file system)的索引节点inode来实现。

Inter Process Communication:
pipes(half-duplex); message queues; communication links; shared memory; FIFO
ref: https://www.guru99.com/inter-process-communication-ipc.html

Async I/O - select; poll; epoll:
select：调用开销大（需要复制集合）；集合大小有限制；需要遍历整个集合找到就绪的描述符
poll：采用链表的方式存储文件描述符，没有最大存储数量的限制，其他方面和 select 没有区别
epoll：调用开销小（不需要复制）；集合大小无限制；采用回调机制，不需要遍历整个集合
select、poll 都是在用户态维护文件描述符集合，因此每次需要将完整集合传给内核；epoll 由操作系统在内核中维护文件描述符集合，因此只需要在创建的时候传入文件描述符。
当连接数较多并且有很多的不活跃连接时，epoll 的效率比其它两者高很多。当连接数较少并且都十分活跃的情况下，由于 epoll 需要很多回调，因此性能可能低于其它两者。
ref: https://imageslr.com/2020/02/27/select-poll-epoll.html
水平触发（LT，Level Trigger）：当文件描述符就绪时，会触发通知，如果用户程序没有一次性把数据读/写完，下次还会发出可读/可写信号进行通知。
边缘触发（ET，Edge Trigger）：仅当描述符从未就绪变为就绪时，通知一次，之后不会再通知。

system call:
为了安全，Linux 中分为用户态和内核态两种运行状态。对于普通进程，平时都是运行在用户态下，仅拥有基本的运行能力。当进行一些敏感操作，
比如说要打开文件(open)然后进行写入(write)、分配内存(malloc)时，就会切换到内核态。内核态进行相应的检查，如果通过了，则按照进程的要求执行相应的操作，
分配相应的资源。这种机制被称为系统调用，用户态进程发起调用，切换到内核态，内核态完成，返回用户态继续执行，是用户态唯一主动切换到内核态的合法手段(exception interrupt 是被动切换)。

具体过程:首先，用户程序为系统调用设置参数。其中一个参数是系统调用编号。参数设置完成后，程序执行“系统调用”指令。x86系统上的软中断由int产生。这个指令会导致一个异常：
产生一个事件，这个事件会致使处理器切换到内核态并跳转到一个新的地址，并开始执行那里的异常处理程序。此时的异常处理程序实际上就是系统调用处理程序。
新地址的指令会保存程序的状态，计算出应该调用哪个系统调用，调用内核中实现那个系统调用的函数，恢复用户程序状态，然后将控制权返还给用户程序。

操作系统内存管理:
OPT, FIFO, LRU, FIFO-second chance, Clock, LFU
ref: https://zhuanlan.zhihu.com/p/359564358



Redis:
简介: https://snailclimb.gitee.io/javaguide/#/docs/database/Redis/redis-all

RDB vs. AOF:
如果不关心数据丢失，可以不持久化。
如果可以承受数分钟以内的数据丢失，可以只使用 RDB。
如果不能承受数分钟以内的数据丢失，可以同时使用 RDB 和 AOF。
有很多用户都只使用 AOF 持久化， 但并不推荐这种方式： 因为定时生成 RDB 快照（snapshot）非常便于进行数据库备份，并且快照恢复数据集的速度也要比 AOF 恢复的速度要快。
ref: https://dunwu.github.io/db-tutorial/nosql/redis/redis-persistence.html#aof-%E7%AE%80%E4%BB%8B
ref: https://redis.io/topics/persistence (eng)

Distributed Locks (分布式锁):
ref: https://www.redis.com.cn/topics/distlock.html
ref: https://redis.io/topics/distlock (eng)



Spring boot:
Spring IOC:
IoC（Inverse of Control:控制反转）是一种设计思想，就是 将原本在程序中手动创建对象的控制权，交由Spring框架来管理。IoC 在其他语言中也有应用，并非 Spring 特有。 
IoC 容器是 Spring 用来实现 IoC 的载体，IoC 容器实际上就是个Map(key，value), Map 中存放的是各种对象。
ref: https://www.zhihu.com/question/23277575/answer/169698662

Spring AOP:
AOP(Aspect-Oriented Programming:面向切面编程)能够将那些与业务无关，却为业务模块所共同调用的逻辑或责任（例如事务处理、日志管理、权限控制等）封装起来，
便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可拓展性和可维护性。

Spring AutoConfiguration: https://www.cnblogs.com/javaguide/p/springboot-auto-config.html



Projects:
KV-store: https://app.gitbook.com/@bryanwu610/s/resume/kv-store
ZooKeeper: https://snailclimb.gitee.io/javaguide/#/docs/system-design/distributed-system/zookeeper/zookeeper-intro

Bcrypt Solver: https://app.gitbook.com/@bryanwu610/s/resume/bcrypt-solver
Source code: https://github.com/DavidMouse1118/ECE454-Projects/tree/master/Assignment_1/a1_starter
RPC: In distributed computing, a remote procedure call (RPC) is when a computer program causes a procedure (subroutine) to execute 
in a different address space (commonly on another computer on a shared network), which is coded as if it were a normal (local) procedure call, 
without the programmer explicitly coding the details for the remote interaction. RPCs are a form of inter-process communication (IPC).
